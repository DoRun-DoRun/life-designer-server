generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int             @id @default(autoincrement())
  email           String          @unique
  memberStatus    MemberStatus
  name            String?
  age             String?
  job             String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?
  lastLoginAt     DateTime?
  authProvider    AuthProvider
  gender          String?
  challenges      String[]
  routines        Routine[]
  routineReviews  RoutineReview[]
  userPreferences UserPreference?
}

model Routine {
  id               Int              @id @default(autoincrement())
  userId           Int
  goal             String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  startTime        Int
  notificationTime Int?
  repeatDays       Boolean[]
  deletedAt        DateTime?
  isDeleted        Boolean          @default(false)
  user             User             @relation(fields: [userId], references: [id])
  subRoutines      SubRoutine[]
  routineReviews   RoutineReview[]
  virtualRoutines  VirtualRoutine[]
}

model VirtualRoutine {
  id         Int       @id @default(autoincrement())
  routineId  Int
  startTime  Int?
  createdAt  DateTime
  updatedAt  DateTime
  repeatDays Boolean[]
  routine    Routine   @relation(fields: [routineId], references: [id], onDelete: Cascade)
}

model SubRoutine {
  id                Int                @id @default(autoincrement())
  routineId         Int
  goal              String
  emoji             String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  duration          Int
  isDeleted         Boolean            @default(false)
  index             Int
  routine           Routine            @relation(fields: [routineId], references: [id], onDelete: Cascade)
  subRoutineReviews SubRoutineReview[]
}

model RoutineReview {
  id                Int                @id @default(autoincrement())
  routineId         Int
  userId            Int
  overallRating     OverallRating
  comments          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  currentStreak     Int                @default(1)
  routine           Routine            @relation(fields: [routineId], references: [id], onDelete: Cascade)
  user              User               @relation(fields: [userId], references: [id])
  subRoutineReviews SubRoutineReview[]
}

model SubRoutineReview {
  id            Int           @id @default(autoincrement())
  reviewId      Int
  subRoutineId  Int
  timeSpent     Int
  isSkipped     Boolean
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  routineReview RoutineReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  subRoutine    SubRoutine    @relation(fields: [subRoutineId], references: [id], onDelete: Cascade)
}

model UserPreference {
  userId               Int      @id
  termsAgreement       Boolean  @default(false)
  privacyAgreement     Boolean  @default(false)
  marketingAgreement   Boolean  @default(false)
  eveningNotifications Boolean  @default(false)
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
}

enum AuthProvider {
  Kakao
  Google
  Apple
  Guest
}

enum MemberStatus {
  Register
  Onboarding
  Delete
}

enum OverallRating {
  Difficult
  Disappointing
  Satisfied
  Proud
}
