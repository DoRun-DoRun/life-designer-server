import OpenAI from 'openai';
const openai = new OpenAI();

/**
 * @typedef {Object} _subRoutine
 * @property {string} emoji
 * @property {string} routine
 * @property {string} miniuteDuration
 */

/**
 * @typedef {Object} _gptCompletion
 * @property {_subRoutine[]} subRoutine
 */

/**
 *
 * @param {import("@prisma/client").User} user
 * @param {string} goal
 * @param {string} habitCategory
 * @param {string[]} actions
 * @returns
 */
const getPrompt = (user, goal, habitCategory, actions) => {
  const defaultValue = 'Ïïå Ïàò ÏóÜÏùå';
  return `
  ÏïàÎÖïÌïòÏÑ∏Ïöî! ÎãπÏã†ÏùÄ Î£®Ìã¥ Ï†ÑÎ¨∏Í∞ÄÎ°úÏÑú ÏÇ¨Ïö©ÏûêÏùò ÏäµÍ¥Ä ÌòïÏÑ±ÏùÑ ÎèïÎäî Î£®Ìã¥ÏùÑ ÏÑ§Í≥ÑÌïòÎäî Ïó≠Ìï†ÏùÑ Îß°Í≥† ÏûàÏäµÎãàÎã§. API ÏÑúÎ≤ÑÎ°úÏÑú, Ï†ïÌï¥ÏßÑ JSON ÌòïÏãù Ïô∏Ïùò ÏùëÎãµÏùÄ Ï†àÎåÄ ÌïòÏßÄ ÎßàÏÑ∏Ïöî.

  ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥:
  - ÎÇòÏù¥: ${user.age ?? defaultValue}
  - ÏÑ±Î≥Ñ: ${user.gender ?? defaultValue}
  - ÏßÅÏóÖ: ${user.job ?? defaultValue}
  - ÏäµÍ¥ÄÏúºÎ°ú ÎßåÎì§Í≥†Ïûê ÌïòÎäî Î™©Ìëú: ${goal ?? defaultValue}
  - ÏäµÍ¥Ä Ïπ¥ÌÖåÍ≥†Î¶¨: ${habitCategory ?? defaultValue}
  - ÏÑ†Ìò∏ÌïòÎäî ÌñâÎèô(Ï∞∏Í≥†Ïö©): ${actions ?? defaultValue}

  ÏÇ¨Ïö©ÏûêÏùò Î™©Ìëú Îã¨ÏÑ±ÏùÑ ÏúÑÌï¥ ÌäπÏ†ï ÏãúÍ∞ÑÎåÄÏóê ÏàòÌñâÌï† Ïàò ÏûàÎäî Ïó∞ÏÜçÏ†ÅÏù∏ ÎèôÏûëÏúºÎ°ú Íµ¨ÏÑ±Îêú ÌïòÎÇòÏùò Î£®Ìã¥ÏùÑ ÏÑ§Í≥ÑÌïòÏÑ∏Ïöî. Î£®Ìã¥ÏùÄ 3~5Í∞úÏùò Îã®Í≥ÑÎ°ú Ïù¥Î£®Ïñ¥Ï†∏Ïïº ÌïòÎ©∞, Í∞Å Îã®Í≥ÑÎäî Ïù¥Ï†Ñ Îã®Í≥ÑÏôÄ ÏûêÏó∞Ïä§ÎüΩÍ≤å Ïó∞Í≤∞ÎêòÍ≥†, ÏÇ¨Ïö©ÏûêÏùò ÏÑ†Ìò∏ ÌñâÎèôÍ≥º Î™©ÌëúÏóê Î∂ÄÌï©Ìï¥Ïïº Ìï©ÎãàÎã§. Î£®Ìã¥ÏùÄ ÏãúÏûëÎ∂ÄÌÑ∞ ÎÅùÍπåÏßÄ ÌïòÎÇòÏùò ÏãúÍ∞ÑÎåÄÏóê ÏôÑÎ£åÎê† Ïàò ÏûàÎèÑÎ°ù ÏÑ§Í≥ÑÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.

  Î£®Ìã¥ ÏÑ§Í≥Ñ Ïãú Îã§Ïùå ÏÇ¨Ìï≠ÏùÑ Í≥†Î†§ÌïòÏÑ∏Ïöî:

  1. **Ïã§Ìñâ ÌÉÄÏù¥Î∞ç Ïù∏ÏßÄ**: Î£®Ìã¥Ïù¥ Ïã§ÌñâÎê† Íµ¨Ï≤¥Ï†ÅÏù∏ ÏãúÍ∞ÑÏùÑ Ï†ïÌïòÏÑ∏Ïöî (Ïòà: Í∏∞ÏÉÅ ÌõÑ, ÏïÑÏπ® 7Ïãú Îì±).
  2. **Ïó∞ÏÜçÏ†ÅÏù∏ ÌñâÎèô Íµ¨ÏÑ±**: Í∞Å ÌñâÎèôÏùÄ Ïù¥Ï†Ñ ÌñâÎèôÍ≥º ÎÖºÎ¶¨Ï†ÅÏúºÎ°ú Ïó∞Í≤∞ÎêòÏñ¥Ïïº ÌïòÎ©∞, Ï†ÑÏ≤¥Ï†ÅÏúºÎ°ú ÌïòÎÇòÏùò ÌùêÎ¶ÑÏùÑ ÎßåÎì§Ïñ¥Ïïº Ìï©ÎãàÎã§.
  3. **Ïã§Ìñâ ÎèôÍ∏∞ ÌåêÎã®**: ÏÇ¨Ïö©ÏûêÍ∞Ä Ìï¥Îãπ ÌñâÎèôÏùÑ ÏàòÌñâÌï† ÎèôÍ∏∞Î•º Î∂ÄÏó¨Ìï† Ïàò ÏûàÎèÑÎ°ù Í∞ÑÎã®ÌïòÍ≥† ÏßÅÍ¥ÄÏ†ÅÏù∏ ÏÑ§Î™ÖÏúºÎ°ú ÌëúÌòÑÌïòÏÑ∏Ïöî.
  4. **Î£®Ìã¥Ïùò Î™©Ï†Å**: Î£®Ìã¥ÏùÄ ÌïòÎ£®Ï¢ÖÏùº ÏàòÌñâÌïòÎäî Í≤ÉÏù¥ ÏïÑÎãå ÏÇ¨Ïö©ÏûêÎ°úÎ∂ÄÌÑ∞ ÌäπÏ†ï ÏãúÍ∞ÑÏóê ÌäπÏ†ï ÌñâÎèôÏùÑ Î¨¥ÏùòÏãùÏ†ÅÏúºÎ°ú Ìï† Ïàò ÏûàÎèÑÎ°ù ÏäµÍ¥ÄÏùÑ ÎßåÎìúÎäî Í≤ÉÏùÑ Î™©Ï†ÅÏúºÎ°ú Ìï©ÎãàÎã§.

  ÏïÑÎûòÏùò ÌòïÏãùÏóê Îî∞Îùº Î£®Ìã¥ÏùÑ JSON ÌòïÌÉúÎ°ú Ï∂úÎ†•ÌïòÏÑ∏Ïöî.

  ÏùëÎãµ ÌòïÏãù:
  {
    "subRoutine": [
      {
        "emoji": "Ïù¥Î™®ÏßÄ",
        "routine": "20Ïûê Ïù¥ÎÇ¥Ïùò ÏßÅÍ¥ÄÏ†ÅÏù∏ Î£®Ìã¥ ÏÑ§Î™Ö (Ïòà: OOÌïòÍ∏∞)",
        "secondDuration": ÏãúÍ∞Ñ(Ï¥à Îã®ÏúÑ)
      },
      ...
    ]
  }

  Î™©Ìëú: "ÏÉÅÏæåÌïú ÏïÑÏπ® ÏãúÏûë"Ïùò ÏòàÏãú ÏùëÎãµ:
  {
    "subRoutine": [
      { "emoji": "‚è∞", "routine": "Í∏∞ÏÉÅÌïòÍ∏∞", "secondDuration": 60 },
      { "emoji": "üöø", "routine": "ÏÉ§ÏõåÌïòÍ∏∞", "secondDuration": 600 },
      { "emoji": "ü•£", "routine": "ÏïÑÏπ® ÏãùÏÇ¨ÌïòÍ∏∞", "secondDuration": 900 },
      { "emoji": "üëî", "routine": "Ïò∑ Í∞àÏïÑÏûÖÍ∏∞", "secondDuration": 300 }
    ]
  }
`;
};

/**
 *
 * @param {import("@prisma/client").User} user
 * @param {string} goal
 * @param {string} category
 * @returns
 */
const getHabitPrompt = (user, goal, category) => {
  const defaultValue = 'Ïïå Ïàò ÏóÜÏùå';
  return `
    ÏïàÎÖïÌïòÏÑ∏Ïöî! ÎãπÏã†ÏùÄ Î£®Ìã¥ Ï†ÑÎ¨∏Í∞ÄÎ°úÏÑú ÏÇ¨Ïö©ÏûêÏùò ÏäµÍ¥Ä ÌòïÏÑ±ÏùÑ ÎèïÎäî ÌñâÎèôÏùÑ Ï∂îÏ≤úÌïòÎäî Ïó≠Ìï†ÏùÑ Îß°Í≥† ÏûàÏäµÎãàÎã§. API ÏÑúÎ≤ÑÎ°úÏÑú, Ï†ïÌï¥ÏßÑ JSON ÌòïÏãù Ïô∏Ïùò ÏùëÎãµÏùÄ Ï†àÎåÄ ÌïòÏßÄ ÎßàÏÑ∏Ïöî.

    ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥:
    - ÎÇòÏù¥: ${user.age ?? defaultValue}
    - ÏÑ±Î≥Ñ: ${user.gender ?? defaultValue}
    - ÏßÅÏóÖ: ${user.job ?? defaultValue}
    - ÏäµÍ¥ÄÏúºÎ°ú ÎßåÎì§Í≥†Ïûê ÌïòÎäî Î™©Ìëú: ${goal ?? defaultValue}
    - ÏäµÍ¥Ä Ïπ¥ÌÖåÍ≥†Î¶¨: ${category ?? defaultValue}

    ÏÇ¨Ïö©ÏûêÍ∞Ä ÏäµÍ¥ÄÏùÑ ÌòïÏÑ±ÌïòÍ∏∞ ÏúÑÌï¥ ÏàòÌñâÌïòÎ©¥ Ï¢ãÏùÄ ÌñâÎèô 10Í∞ÄÏßÄÎ•º ÏïÑÎûòÏùò ÏßÄÏπ®Ïóê Îî∞Îùº Ï∂îÏ≤úÌïòÍ≥†, ÏßÄÏ†ïÎêú JSON ÌòïÏãùÏúºÎ°úÎßå Ï∂úÎ†•ÌïòÏÑ∏Ïöî:

    - Í∞Å ÌñâÎèôÏùÄ ÏÇ¨Ïö©ÏûêÏùò Î™©ÌëúÏôÄ Ïπ¥ÌÖåÍ≥†Î¶¨Ïóê Î∂ÄÌï©Ìï¥Ïïº Ìï©ÎãàÎã§.
    - ÌñâÎèôÏùÄ Íµ¨Ï≤¥Ï†ÅÏù¥Í≥† Ïã§Ï≤ú Í∞ÄÎä•Ìï¥Ïïº Ìï©ÎãàÎã§.
    - ÌñâÎèôÏùÄ Í∞ÑÍ≤∞ÌïòÍ≥† Î™ÖÌôïÌïòÍ≤å Í∏∞Ïà†ÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.
    - ÌñâÎèôÏùÄ ÏÇ¨Ïö©ÏûêÍ∞Ä ÏùºÏÉÅÏóêÏÑú ÏâΩÍ≤å Ï†ÅÏö©Ìï† Ïàò ÏûàÏñ¥Ïïº Ìï©ÎãàÎã§.

    ÏùëÎãµ ÌòïÏãù:
    {"actions": ["ÌñâÎèô 1", "ÌñâÎèô 2", "ÌñâÎèô 3", "ÌñâÎèô 4", "ÌñâÎèô 5", "ÌñâÎèô 6", "ÌñâÎèô 7", "ÌñâÎèô 8", "ÌñâÎèô 9", "ÌñâÎèô 10"]}

    **Ï£ºÏùòÏÇ¨Ìï≠:**
    - ÏùëÎãµÏùÄ Î∞òÎìúÏãú ÏúÑÏùò JSON ÌòïÏãùÎßåÏùÑ Ìè¨Ìï®Ìï¥Ïïº Ìï©ÎãàÎã§.
    - "actions" Î∞∞Ïó¥ÏóêÎäî Ï¥ù 10Í∞úÏùò Í≥†Ïú†Ìïú ÌñâÎèôÏù¥ Ìè¨Ìï®ÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.
    - JSON Ïô∏Ïùò ÌÖçÏä§Ìä∏, ÏÑ§Î™Ö ÎòêÎäî Ï∂îÍ∞Ä Ï†ïÎ≥¥Îäî Ìè¨Ìï®ÌïòÏßÄ ÎßàÏÑ∏Ïöî.
  `;
};

/**
 * userÏôÄ goalÏùÑ Î∞õÏïÑ ÏÑúÎ∏å Î£®Ìã¥Îì§ÏùÑ ÏÉùÏÑ±ÌïúÎã§.
 * @param {import("@prisma/client").User} user
 * @param {string} goal
 * @param {string} habitCategory
 * @param {string[]} actions
 * @returns
 */
export const subRoutineRecommended = async (
  user,
  goal,
  habitCategory,
  actions
) => {
  console.log('[OPENAI LOG]: Request start');
  const completion = await openai.chat.completions.create({
    model: 'gpt-4', // Ïò¨Î∞îÎ•∏ Î™®Îç∏ Ïù¥Î¶Ñ ÏÇ¨Ïö©
    messages: [
      {
        role: 'user',
        content: getPrompt(user, goal, habitCategory, actions), // Î¨∏ÏûêÏó¥Î°ú Ï†ÑÎã¨
      },
    ],
  });
  console.log('[OPENAI LOG]: Request end.', completion._request_id);
  console.log('[OPENAI LOG]: Data.', completion.choices);

  let json;
  try {
    json = JSON.parse(
      completion.choices[0].message.content.replace(/```(json)?/g, '').trim()
    );
  } catch (error) {
    console.error('Failed to parse JSON from GPT response:', error.message);
    throw new Error('Invalid JSON response received from GPT.');
  }

  if (!json || !Array.isArray(json.subRoutine)) {
    throw new Error('Invalid response format received from GPT.');
  }

  const subRoutines = json.subRoutine.map((sr) => {
    const { emoji, secondDuration: duration, routine: goal } = sr;
    return { emoji, duration, goal };
  });

  return subRoutines;
};

/**
 * userÏôÄ goalÏùÑ Î∞õÏïÑ ÏÑúÎ∏å Î£®Ìã¥Îì§ÏùÑ ÏÉùÏÑ±ÌïúÎã§.
 * @param {import("@prisma/client").User} user
 * @param {string} goal
 * @returns
 */
export const habitRecommended = async (user, goal, category) => {
  console.log('[OPENAI LOG]: Request start');
  const completion = await openai.chat.completions.create({
    model: 'gpt-4', // Ïò¨Î∞îÎ•∏ Î™®Îç∏ Ïù¥Î¶Ñ ÏÇ¨Ïö©
    messages: [
      {
        role: 'user',
        content: getHabitPrompt(user, goal, category), // Î¨∏ÏûêÏó¥Î°ú Ï†ÑÎã¨
      },
    ],
  });
  console.log('[OPENAI LOG]: Request end.', completion._request_id);
  console.log('[OPENAI LOG]: Data.', completion.choices);

  let json;
  try {
    json = JSON.parse(
      completion.choices[0].message.content.replace(/```(json)?/g, '').trim()
    );
  } catch (error) {
    console.error('Failed to parse JSON from GPT response:', error.message);
    throw new Error('Invalid JSON response received from GPT.');
  }

  if (!json || !Array.isArray(json.actions) || json.actions.length !== 10) {
    throw new Error('Invalid response format received from GPT.');
  }

  return json;
};
